"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[189],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},84499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:3},r="Creating Custom Widgets",s={unversionedId:"creating-widgets",id:"creating-widgets",title:"Creating Custom Widgets",description:"Creating custom widgets is easy. Widgets in Plasma are just functions!",source:"@site/docs/creating-widgets.md",sourceDirName:".",slug:"/creating-widgets",permalink:"/plasma/docs/creating-widgets",draft:!1,editUrl:"https://github.com/evaera/plasma/edit/main/docs/creating-widgets.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/plasma/docs/getting-started"},next:{title:"Usage details",permalink:"/plasma/docs/details"}},l={},u=[{value:"Only updating properties when necessary with useEffect",id:"only-updating-properties-when-necessary-with-useeffect",level:2},{value:"Persistent state with the useState hook",id:"persistent-state-with-the-usestate-hook",level:2},{value:"Getting information out of widgets",id:"getting-information-out-of-widgets",level:2},{value:"Nested widgets",id:"nested-widgets",level:2},{value:"Automatic size",id:"automatic-size",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-custom-widgets"},"Creating Custom Widgets"),(0,i.kt)("p",null,"Creating custom widgets is easy. Widgets in Plasma are just functions!"),(0,i.kt)("p",null,"To create a widget, pass a function to the ",(0,i.kt)("inlineCode",{parentName:"p"},"widget")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="myButton.lua"',title:'"myButton.lua"'},'local Plasma = require(ReplicatedStorage.Plasma)\n\nreturn Plasma.widget(function(text, color)\n    local refs = Plasma.useInstance(function(ref)\n        -- Code here only runs one time to create the widget.\n        -- Only set properties here that DO NOT depend on arguments.\n\n        return Plasma.create("TextButton", {\n            [ref] = "button",\n            Font = Enum.Font.GothamBold,\n            TextColor3 = Color3.fromRGB(147, 147, 147),\n            BackgroundColor3 = Color3.fromRGB(54, 54, 54),\n            TextSize = 20,\n            Size = UDim2.new(0, 0, 0, 30),\n            AutomaticSize = Enum.AutomaticSize.XY,\n\n            -- We can create children here as well\n            Plasma.create("UIPadding", {\n                PaddingBottom = UDim.new(0, 10),\n                PaddingLeft = UDim.new(0, 20),\n                PaddingRight = UDim.new(0, 20),\n                PaddingTop = UDim.new(0, 10),\n            }),\n\n            Plasma.create("UICorner", {\n                CornerRadius = UDim.new(0, 8),\n            }),\n        })\n    end)\n\n    -- In the main body of the function, we set the properties that do depend on arguments.\n\n    refs.button.Text = text\n    refs.button.TextColor3 = color\nend)\n')),(0,i.kt)("p",null,"In the above code snippet, we use the ",(0,i.kt)("a",{parentName:"p",href:"/api/Plasma#useInstance"},(0,i.kt)("inlineCode",{parentName:"a"},"useInstance"))," hook, which takes a callback that is used to create the initial UI for the widget. The callback is only ever invoked on the first time this widget runs and never again."),(0,i.kt)("p",null,"The function you pass in to ",(0,i.kt)("inlineCode",{parentName:"p"},"useInstance")," is passed a blank table. We called it ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," in the example above. When you use it as a table key to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Plasma.create")," function, a reference to the instance you're creating is created in the table, at the key you specify."),(0,i.kt)("p",null,"In the example above, the code ",(0,i.kt)("inlineCode",{parentName:"p"},'[ref] = "button"'),' means that the key "button" in the ',(0,i.kt)("inlineCode",{parentName:"p"},"ref")," table will be set to the TextButton."),(0,i.kt)("h2",{id:"only-updating-properties-when-necessary-with-useeffect"},"Only updating properties when necessary with useEffect"),(0,i.kt)("p",null,"Typically, setting properties every frame is not that expensive of an operation, but if you only wanted to set ",(0,i.kt)("inlineCode",{parentName:"p"},"Text")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TextColor3")," when their arguments actually changed, we can use the ",(0,i.kt)("a",{parentName:"p",href:"/api/Plasma#useEffect"},(0,i.kt)("inlineCode",{parentName:"a"},"useEffect"))," hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Plasma.useEffect(function()\n    label.Text = text\n    label.TextColor3 = color\nend, text, color)\n")),(0,i.kt)("p",null,"Now, this code will only ever be invoked if ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," actually changes from the last run."),(0,i.kt)("h2",{id:"persistent-state-with-the-usestate-hook"},"Persistent state with the useState hook"),(0,i.kt)("p",null,"Let's make a counter button! The button's text should increase by 1 every time we click it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="myButton.lua"',title:'"myButton.lua"'},'local Plasma = require(ReplicatedStorage.Plasma)\n\nreturn Plasma.widget(function(text, color)\n    local times, setTimes = Plasma.useState(0) -- new!\n\n    local refs = Plasma.useInstance(function(ref)\n        return Plasma.create("TextButton", {\n            -- snip --\n\n            Activated = function() -- new!\n                setTimes(function(last)\n                    return last + 1\n                end)\n            end,\n        })\n    end)\n\n\n    refs.button.Text = text .. " " .. times -- new!\nend)\n')),(0,i.kt)("p",null,"(Extraneous lines have been removed from the above example)"),(0,i.kt)("p",null,"Now, every time the user clicks this button, it'll concatenate the text they passed in with the number of times the button's been pressed."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://i.eryn.io/2150/RobloxStudioBeta-sNsoBtKL.png",alt:"Button presses"})),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"A note on useState with useInstance and useEffect")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Notice that we pass a function to ",(0,i.kt)("inlineCode",{parentName:"p"},"setTimes"),". What would have happened if we just wrote ",(0,i.kt)("inlineCode",{parentName:"p"},"setTimes(times + 1)")," instead?"),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"It would only go to 1"),"! This is because (as we mentioned above), the code inside ",(0,i.kt)("inlineCode",{parentName:"p"},"useInstance")," only ever runs once, when the widget is created. This means that the ",(0,i.kt)("inlineCode",{parentName:"p"},"times")," variable the ",(0,i.kt)("inlineCode",{parentName:"p"},"useInstance")," closure captured is always going to be ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",{parentName:"div"},"In the main scope of the widget function, ",(0,i.kt)("inlineCode",{parentName:"p"},"times")," is what you expect, because it does run every frame. But inside ",(0,i.kt)("inlineCode",{parentName:"p"},"useInstance")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," functions, ",(0,i.kt)("inlineCode",{parentName:"p"},"times")," is always going to be what it was when those functions ran."),(0,i.kt)("p",{parentName:"div"},"That's why the set callback (",(0,i.kt)("inlineCode",{parentName:"p"},"setTimes"),") can be given a function, which is invoked immediately with the ",(0,i.kt)("em",{parentName:"p"},"current")," value of ",(0,i.kt)("inlineCode",{parentName:"p"},"times"),". Problem solved!"))),(0,i.kt)("h2",{id:"getting-information-out-of-widgets"},"Getting information out of widgets"),(0,i.kt)("p",null,"Let's say you want your users to be able to see how many times your button was clicked in their code when they use your button widget."),(0,i.kt)("p",null,"You already know how to do this: just return it!"),(0,i.kt)("p",null,"At the bottom of your widget, just:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"return {\n    times = times\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Returning a table with named values instead of returning a value directly is recommended, because it allows you to add more return values in the future without breaking your API interface."))),(0,i.kt)("p",null,"Then, when you use your button widget, you can just check it!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Using your widget"',title:'"Using',your:!0,'widget"':!0},'Plasma.start(root, function()\n    Plasma.window("Button", function()\n        local timesClicked = myButton("hi", Color3.fromRGB(255, 153, 0)).times\n\n        if timesClicked > 50 then\n            Plasma.label("You clicked them all!")\n        end\n    end)\nend)\n')),(0,i.kt)("h2",{id:"nested-widgets"},"Nested widgets"),(0,i.kt)("p",null,"You can use widgets inside of other widgets."),(0,i.kt)("p",null,"For example, you could blur the world only if the number of times clicked is even:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"if times % 2 == 0 then\n    Plasma.blur(20)\nend\n")),(0,i.kt)("h2",{id:"automatic-size"},"Automatic size"),(0,i.kt)("p",null,"Roblox has an automatic size property of GuiObjects, but it doesn't always work correctly, especially with padding."),(0,i.kt)("p",null,"Plasma comes with an alternative automatic sizing function: ",(0,i.kt)("a",{parentName:"p",href:"/api/Plasma#automaticSize"},(0,i.kt)("inlineCode",{parentName:"a"},"automaticSize")),"."),(0,i.kt)("p",null,"To use it, just call ",(0,i.kt)("inlineCode",{parentName:"p"},"automaticSize")," inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"useInstance")," function, passing in your root frame."))}d.isMDXComponent=!0}}]);